commit cab761b9f5ee5dee1448bc5d6b1d9f5a0ff0bad5
Author: Andrei Matei <andrei@cockroachlabs.com>
Date:   Tue Jun 28 11:24:29 2016 -0400

    sql: avoid deadlock in lease acquisition
    
    We were locking leaseState, tableNameCache in Release(), but
    tableNameCache,LeaseState in AcquireByName.
    Refactored Release() to not require both locks at the same time.

diff --git a/sql/lease.go b/sql/lease.go
index c742eeb..ac35827 100644
--- a/sql/lease.go
+++ b/sql/lease.go
@@ -90,6 +90,22 @@ func (s *LeaseState) Refcount() int {
 	return s.refcount
 }
 
+func (s *LeaseState) incRefcount() {
+	s.mu.Lock()
+	s.incRefcountLocked()
+	s.mu.Unlock()
+}
+func (s *LeaseState) incRefcountLocked() {
+	if s.released {
+		panic(fmt.Sprintf("trying to incRefcount on released lease: %+v", s))
+	}
+	s.refcount++
+	if log.V(3) {
+		log.Infof("LeaseState.incRef: descID=%d name=%q version=%d refcount=%d",
+			s.ID, s.Name, s.Version, s.refcount)
+	}
+}
+
 // LeaseStore implements the operations for acquiring and releasing leases and
 // publishing a new version of a descriptor. Exported only for testing.
 type LeaseStore struct {
@@ -521,13 +537,7 @@ func (t *tableState) checkLease(
 	if !skipLifeCheck && !lease.hasSomeLifeLeft(clock) {
 		return nil
 	}
-	lease.mu.Lock()
-	lease.refcount++
-	lease.mu.Unlock()
-	if log.V(3) {
-		log.Infof("acquire: descID=%d name=%q version=%d refcount=%d",
-			lease.ID, lease.Name, lease.Version, lease.refcount)
-	}
+	lease.incRefcount()
 	return lease
 }
 
@@ -638,40 +648,45 @@ func (t *tableState) release(lease *LeaseState, store LeaseStore) error {
 	if s == nil {
 		return errors.Errorf("table %d version %d not found", lease.ID, lease.Version)
 	}
-	s.mu.Lock()
-	defer s.mu.Unlock()
-	s.refcount--
-	if log.V(3) {
-		log.Infof("release: descID=%d name:%q version=%d refcount=%d", s.ID, s.Name, s.Version, s.refcount)
-	}
-	if s.refcount < 0 {
-		panic(fmt.Sprintf("negative ref count: descID=%d(%q) version=%d refcount=%d", s.ID, s.Name, s.Version, s.refcount))
-	}
-	if s.refcount == 0 {
+	// Decrements the refcount and returns true if the lease has to be removed
+	// from the store.
+	decRefcount := func(s *LeaseState) bool {
+		// Figure out if we'd like to remove the lease from the store asap (i.e. when
+		// the refcount drops to 0). If so, we'll need to mark the lease as released.
+		removeOnceDereferenced := false
+		// Release from the store if the table has been deleted; no leases can be
+		// acquired any more.
 		if t.deleted {
-			t.removeLease(s, store)
-			return nil
+			removeOnceDereferenced = true
 		}
-		n := t.active.findNewest(0)
-		if s != n {
-			if s.Version < n.Version {
-				// TODO(pmattis): If an active transaction is releasing the lease for
-				// an older version, hold on to it for a few seconds in anticipation of
-				// another operation being performed within the transaction. If we
-				// release the lease immediately the transaction will necessarily abort
-				// on the next operation due to not being able to get the lease.
-			}
-			t.removeLease(s, store)
-			return nil
+		// Release from the store if the lease is not for the latest version; only
+		// leases for the latest version can be acquired.
+		if s != t.active.findNewest(0) {
+			removeOnceDereferenced = true
+		}
+
+		s.mu.Lock()
+		defer s.mu.Unlock()
+		s.refcount--
+		if log.V(3) {
+			log.Infof("release: descID=%d name:%q version=%d refcount=%d", s.ID, s.Name, s.Version, s.refcount)
+		}
+		if s.refcount < 0 {
+			panic(fmt.Sprintf("negative ref count: descID=%d(%q) version=%d refcount=%d", s.ID, s.Name, s.Version, s.refcount))
 		}
+		if s.refcount == 0 && removeOnceDereferenced {
+			s.released = true
+		}
+		return s.released
+	}
+	if decRefcount(s) {
+		t.removeLease(s, store)
 	}
 	return nil
 }
 
 // t.mu needs to be locked.
-// lease.mu needs to be locked.
 func (t *tableState) removeLease(lease *LeaseState, store LeaseStore) {
-	lease.released = true
 	t.active.remove(lease)
 	t.tableNameCache.remove(lease)
 	// Release to the store asynchronously, without the tableState lock.
@@ -815,8 +830,7 @@ func (c *tableNameCache) get(dbID sqlbase.ID, tableName string, clock *hlc.Clock
 		// this cache entry soon.
 		return nil
 	}
-	lease.refcount++
-
+	lease.incRefcountLocked()
 	return lease
 }
 
@@ -866,7 +880,11 @@ func (c *tableNameCache) makeCacheKey(dbID sqlbase.ID, tableName string) tableNa
 
 // LeaseManager manages acquiring and releasing per-table leases. It also
 // handles resolving table names to descriptor IDs.
+//
 // Exported only for testing.
+//
+// The locking order is:
+// LeaseManager.mu > tableState.mu > tableNameCache.mu > LeaseState.mu
 type LeaseManager struct {
 	LeaseStore
 	mu     sync.Mutex
@@ -1039,9 +1057,7 @@ func (m *LeaseManager) acquireFreshestFromStore(
 	if lease == nil {
 		panic("no lease in active set after having just acquired one")
 	}
-	lease.mu.Lock()
-	lease.refcount++
-	lease.mu.Unlock()
+	lease.incRefcount()
 	return lease, nil
 }
 
@@ -1110,8 +1126,8 @@ func (m *LeaseManager) RefreshLeases(s *stop.Stopper, db *client.DB, gossip *gos
 							continue
 						}
 						if log.V(2) {
-							log.Infof("%s: refreshing lease table: %d (%s), version: %d",
-								kv.Key, table.ID, table.Name, table.Version)
+							log.Infof("%s: refreshing lease table: %d (%s), version: %d, deleted: %t",
+								kv.Key, table.ID, table.Name, table.Version, table.Deleted())
 						}
 						// Try to refresh the table lease to one >= this version.
 						if t := m.findTableState(table.ID, false /* create */); t != nil {
diff --git a/sql/lease_internal_test.go b/sql/lease_internal_test.go
index 67d4d42..010b54e 100644
--- a/sql/lease_internal_test.go
+++ b/sql/lease_internal_test.go
@@ -333,3 +333,125 @@ CREATE TABLE t.test (k CHAR PRIMARY KEY, v CHAR);
 		t.Fatal(err)
 	}
 }
+
+// Test that there's no deadlock between AcquireByName and Release.
+// We used to have one due to lock inversion between the tableNameCache lock and
+// the leaseState lock, triggered when the same lease was Release()d after the
+// table had been deleted (which means it's removed from the tableNameCache) and
+// AcquireByName()d at the same time.
+func TestReleaseAcquireByNameDeadlock(t *testing.T) {
+	defer leaktest.AfterTest(t)()
+	removalTracker := NewLeaseRemovalTracker()
+	testingKnobs := base.TestingKnobs{
+		SQLLeaseManager: &LeaseManagerTestingKnobs{
+			LeaseStoreTestingKnobs: LeaseStoreTestingKnobs{
+				LeaseReleasedEvent: removalTracker.LeaseRemovedNotification,
+			},
+		},
+	}
+	s, sqlDB, kvDB, cleanup := sqlutils.SetupServerWithParams(
+		t, testingshim.TestServerParams{Knobs: testingKnobs})
+	defer cleanup()
+	leaseManager := s.LeaseManager().(*LeaseManager)
+
+	if _, err := sqlDB.Exec(`
+CREATE DATABASE t;
+CREATE TABLE t.test (k CHAR PRIMARY KEY, v CHAR);
+`); err != nil {
+		t.Fatal(err)
+	}
+
+	tableDesc := sqlbase.GetTableDescriptor(kvDB, "t", "test")
+
+	// Populate the name cache.
+	var lease *LeaseState
+	if err := kvDB.Txn(func(txn *client.Txn) error {
+		var err error
+		lease, err = leaseManager.AcquireByName(txn, tableDesc.ParentID, "test")
+		return err
+	}); err != nil {
+		t.Fatal(err)
+	}
+	if err := leaseManager.Release(lease); err != nil {
+		t.Fatal(err)
+	}
+
+	// Pretend the table has been deleted, so that when we release leases on it,
+	// they are removed from the tableNameCache too.
+	tableState := leaseManager.findTableState(tableDesc.ID, true)
+	tableState.deleted = true
+
+	// Try to trigger the race repeatedly: race an AcquireByName against a
+	// Release.
+	// leaseChan acts as a barrier, synchornizing the two routines at every
+	// iteration.
+	leaseChan := make(chan *LeaseState)
+	errChan := make(chan error)
+	go func() {
+		for lease := range leaseChan {
+			// Move errors to the main goroutine.
+			errChan <- leaseManager.Release(lease)
+		}
+	}()
+
+	for i := 0; i < 50; i++ {
+		var leaseByName *LeaseState
+		if err := kvDB.Txn(func(txn *client.Txn) error {
+			var err error
+			lease, err := leaseManager.AcquireByName(txn, tableDesc.ParentID, "test")
+			if err != nil {
+				t.Fatal(err)
+			}
+			// This test will need to wait until leases are removed from the store
+			// before creating new leases because the jitter used in the leases'
+			// expiration causes duplicate key errors when trying to create new
+			// leases. This is not a problem in production, since leases are not
+			// removed from the store until they expire, and the jitter is small
+			// compared to their lifetime, but it is a problem in this test because
+			// we churn through leases quickly.
+			tracker := removalTracker.TrackRemoval(lease)
+			// Start the race: signal the other guy to release, and we do another
+			// acquire at the same time.
+			leaseChan <- lease
+			leaseByName, err = leaseManager.AcquireByName(txn, tableDesc.ParentID, "test")
+			if err != nil {
+				t.Fatal(err)
+			}
+			tracker2 := removalTracker.TrackRemoval(leaseByName)
+			// See if there was an error releasing lease.
+			err = <-errChan
+			if err != nil {
+				t.Fatal(err)
+			}
+
+			// Depending on how the race went, there are two cases - either the
+			// AcquireByName ran first, and got the same lease as we already had,
+			// or the Release ran first and so we got a new lease.
+			if leaseByName == lease {
+				if lease.Refcount() != 1 {
+					t.Fatalf("expected refcount 1, got %d", lease.Refcount())
+				}
+				if err := leaseManager.Release(lease); err != nil {
+					t.Fatal(err)
+				}
+				if err := tracker.WaitForRemoval(); err != nil {
+					t.Fatal(err)
+				}
+			} else {
+				if lease.Refcount() != 0 {
+					t.Fatalf("expected refcount 0, got %d", lease.Refcount())
+				}
+				if err := leaseManager.Release(leaseByName); err != nil {
+					t.Fatal(err)
+				}
+				if err := tracker2.WaitForRemoval(); err != nil {
+					t.Fatal(err)
+				}
+			}
+			return nil
+		}); err != nil {
+			t.Fatal(err)
+		}
+	}
+	close(leaseChan)
+}
