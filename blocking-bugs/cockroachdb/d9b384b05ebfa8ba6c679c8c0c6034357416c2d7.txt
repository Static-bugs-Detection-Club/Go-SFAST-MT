commit d9b384b05ebfa8ba6c679c8c0c6034357416c2d7
Author: es-chow <es_chow@163.com>
Date:   Wed Sep 9 22:30:56 2015 +0800

    try to resolve the deadlock between multiraft eventsChan and callbackChan with buffered events, and buffer the proposal if any ConfChange pending in applying to make the buffering proposal switching over to new configuration.

diff --git a/multiraft/events_test.go b/multiraft/events_test.go
index 89f55b8..e2c71fd 100644
--- a/multiraft/events_test.go
+++ b/multiraft/events_test.go
@@ -31,10 +31,10 @@ type eventDemux struct {
 	CommandCommitted          chan *EventCommandCommitted
 	MembershipChangeCommitted chan *EventMembershipChangeCommitted
 
-	events <-chan interface{}
+	events <-chan []interface{}
 }
 
-func newEventDemux(events <-chan interface{}) *eventDemux {
+func newEventDemux(events <-chan []interface{}) *eventDemux {
 	return &eventDemux{
 		make(chan *EventLeaderElection, 1000),
 		make(chan *EventCommandCommitted, 1000),
@@ -47,21 +47,22 @@ func (e *eventDemux) start(stopper *stop.Stopper) {
 	stopper.RunWorker(func() {
 		for {
 			select {
-			case event := <-e.events:
-				switch event := event.(type) {
-				case *EventLeaderElection:
-					e.LeaderElection <- event
+			case events := <-e.events:
+				for _, event := range events {
+					switch event := event.(type) {
+					case *EventLeaderElection:
+						e.LeaderElection <- event
 
-				case *EventCommandCommitted:
-					e.CommandCommitted <- event
+					case *EventCommandCommitted:
+						e.CommandCommitted <- event
 
-				case *EventMembershipChangeCommitted:
-					e.MembershipChangeCommitted <- event
+					case *EventMembershipChangeCommitted:
+						e.MembershipChangeCommitted <- event
 
-				default:
-					panic(fmt.Sprintf("got unknown event type %T", event))
+					default:
+						panic(fmt.Sprintf("got unknown event type %T", event))
+					}
 				}
-
 			case <-stopper.ShouldStop():
 				close(e.CommandCommitted)
 				close(e.MembershipChangeCommitted)
diff --git a/multiraft/multiraft.go b/multiraft/multiraft.go
index 7bf1108..b2bd237 100644
--- a/multiraft/multiraft.go
+++ b/multiraft/multiraft.go
@@ -67,14 +67,6 @@ type Config struct {
 	HeartbeatIntervalTicks int
 	TickInterval           time.Duration
 
-	// EventBufferSize is the capacity (in number of events) of the
-	// MultiRaft.Events channel. In tests, we use 0 to ensure that there
-	// are no deadlocks when the limit is reached; real deployments may
-	// want to set a buffer so that applying a command committed on one
-	// group does not interfere with other groups or cause heartbeats to
-	// be missed.
-	EventBufferSize int
-
 	EntryFormatter raft.EntryFormatter
 }
 
@@ -102,7 +94,7 @@ type MultiRaft struct {
 	Config
 	stopper         *stop.Stopper
 	multiNode       raft.MultiNode
-	Events          chan interface{}
+	Events          chan []interface{}
 	nodeID          proto.RaftNodeID
 	reqChan         chan *RaftMessageRequest
 	createGroupChan chan *createGroupOp
@@ -150,7 +142,7 @@ func NewMultiRaft(nodeID proto.RaftNodeID, config *Config, stopper *stop.Stopper
 		nodeID:    nodeID,
 
 		// Output channel.
-		Events: make(chan interface{}, config.EventBufferSize),
+		Events: make(chan []interface{}),
 
 		// Input channels.
 		reqChan:         make(chan *RaftMessageRequest, reqBufferSize),
@@ -184,11 +176,8 @@ func (ms *multiraftServer) RaftMessage(req *RaftMessageRequest) (*RaftMessageRes
 	}
 }
 
-func (m *MultiRaft) sendEvent(event interface{}) {
-	select {
-	case m.Events <- event:
-	case <-m.stopper.ShouldStop():
-	}
+func (s *state) sendEvent(event interface{}) {
+	s.pendingEvents = append(s.pendingEvents, event)
 }
 
 // fanoutHeartbeat sends the given heartbeat to all groups which believe that
@@ -391,6 +380,10 @@ type group struct {
 	writing bool
 	// nodeIDs track the remote nodes associated with this group.
 	nodeIDs []proto.RaftNodeID
+	// waitForCallback is true while a configuration change callback
+	// is waiting to be called. It's a bool other than a counter
+	// as only one configuration change should be pending in range leader.
+	waitForCallback bool
 }
 
 type createGroupOp struct {
@@ -428,6 +421,9 @@ type state struct {
 	groups    map[proto.RangeID]*group
 	nodes     map[proto.RaftNodeID]*node
 	writeTask *writeTask
+	// Buffer the events and send them in batch to avoid the deadlock
+	// between s.Events channel and callbackChan.
+	pendingEvents []interface{}
 }
 
 func newState(m *MultiRaft) *state {
@@ -465,6 +461,7 @@ func (s *state) start() {
 			// performing all writes synchronously.
 			// TODO(bdarnell): either reinstate writeReady or rip it out completely.
 			//var writeReady chan struct{}
+			var eventsChan chan []interface{}
 
 			// The order of operations in this loop structure is as follows:
 			// start by setting raftReady to the multiNode's Ready()
@@ -479,6 +476,12 @@ func (s *state) start() {
 				raftReady = s.multiNode.Ready()
 			}
 
+			// If there is any pending events, then check the s.Events to see
+			// if it's free to accept pending events.
+			if len(s.pendingEvents) > 0 {
+				eventsChan = s.Events
+			}
+
 			if log.V(8) {
 				log.Infof("node %v: selecting", s.nodeID)
 			}
@@ -569,7 +572,16 @@ func (s *state) start() {
 				}
 
 			case cb := <-s.callbackChan:
+				if log.V(8) {
+					log.Infof("node %v: got callback", s.nodeID)
+				}
 				cb()
+
+			case eventsChan <- s.pendingEvents:
+				if log.V(8) {
+					log.Infof("node %v: send pendingEvents len %d", s.nodeID, len(s.pendingEvents))
+				}
+				s.pendingEvents = nil
 			}
 		}
 	})
@@ -787,6 +799,11 @@ func (s *state) propose(p *proposal) {
 		s.removePending(nil, p, ErrGroupDeleted)
 		return
 	}
+	// If configration change callback is pending, wait for it.
+	if g.waitForCallback {
+		g.pending[p.commandID] = p
+		return
+	}
 
 	if log.V(3) {
 		log.Infof("group %d: new proposal %x", p.groupID, p.commandID)
@@ -881,6 +898,7 @@ func (s *state) processCommittedEntry(groupID proto.RangeID, g *group, entry raf
 		if len(cc.Context) > 0 {
 			commandID, payload = decodeCommand(cc.Context)
 		}
+		g.waitForCallback = true
 		s.sendEvent(&EventMembershipChangeCommitted{
 			GroupID:    groupID,
 			CommandID:  commandID,
@@ -914,11 +932,9 @@ func (s *state) processCommittedEntry(groupID proto.RangeID, g *group, entry raf
 							raftpb.ConfChange{})
 					}
 
-					// Re-submit all pending proposals, in case any of them were config changes
-					// that were dropped due to the one-at-a-time rule. This is a little
-					// redundant since most pending proposals won't benefit from this but
-					// config changes should be rare enough (and the size of the pending queue
-					// small enough) that it doesn't really matter.
+					// Re-submit all pending proposals that were held
+					// while the config change was pending
+					g.waitForCallback = false
 					for _, prop := range g.pending {
 						s.propose(prop)
 					}
diff --git a/multiraft/multiraft_test.go b/multiraft/multiraft_test.go
index 09af5ad..9e01946 100644
--- a/multiraft/multiraft_test.go
+++ b/multiraft/multiraft_test.go
@@ -217,18 +217,22 @@ func TestLeaderElectionEvent(t *testing.T) {
 
 	// Process a Ready with a new leader but no new commits.
 	// This happens while an election is in progress.
-	cluster.nodes[1].maybeSendLeaderEvent(groupID, cluster.nodes[1].groups[groupID],
-		&raft.Ready{
-			SoftState: &raft.SoftState{
-				Lead: 3,
-			},
-		})
-
+	// This may be dirty, but it seems this is the only way to make testrace pass.
+	cluster.nodes[1].callbackChan <- func() {
+		cluster.nodes[1].maybeSendLeaderEvent(groupID, cluster.nodes[1].groups[groupID],
+			&raft.Ready{
+				SoftState: &raft.SoftState{
+					Lead: 3,
+				},
+			})
+	}
+	// Trigger multiraft another round select
+	cluster.tickers[1].Tick()
 	// No events are sent.
 	select {
 	case e := <-cluster.events[1].LeaderElection:
 		t.Fatalf("got unexpected event %v", e)
-	case <-time.After(time.Millisecond):
+	case <-time.After(200 * time.Millisecond):
 	}
 
 	// Now there are new committed entries. A new leader always commits an entry
@@ -237,11 +241,15 @@ func TestLeaderElectionEvent(t *testing.T) {
 		Index: 42,
 		Term:  42,
 	}
-	cluster.nodes[1].maybeSendLeaderEvent(groupID, cluster.nodes[1].groups[groupID],
-		&raft.Ready{
-			Entries:          []raftpb.Entry{entry},
-			CommittedEntries: []raftpb.Entry{entry},
-		})
+	// This may be dirty, but it seems this is the only way to make testrace pass.
+	cluster.nodes[1].callbackChan <- func() {
+		cluster.nodes[1].maybeSendLeaderEvent(groupID, cluster.nodes[1].groups[groupID],
+			&raft.Ready{
+				Entries:          []raftpb.Entry{entry},
+				CommittedEntries: []raftpb.Entry{entry},
+			})
+	}
+	cluster.tickers[1].Tick()
 
 	// Now we get an event.
 	select {
@@ -253,7 +261,7 @@ func TestLeaderElectionEvent(t *testing.T) {
 		}) {
 			t.Errorf("election event did not match expectations: %+v", e)
 		}
-	case <-time.After(time.Millisecond):
+	case <-time.After(200 * time.Millisecond):
 		t.Fatal("didn't get expected event")
 	}
 }
diff --git a/storage/store.go b/storage/store.go
index 0cb7b5c..cb7b00b 100644
--- a/storage/store.go
+++ b/storage/store.go
@@ -469,10 +469,6 @@ func (s *Store) Start(stopper *stop.Stopper) error {
 		ElectionTimeoutTicks:   s.ctx.RaftElectionTimeoutTicks,
 		HeartbeatIntervalTicks: s.ctx.RaftHeartbeatIntervalTicks,
 		EntryFormatter:         raftEntryFormatter,
-		// TODO(bdarnell): Multiraft deadlocks if the Events channel is
-		// unbuffered. Temporarily give it some breathing room until the underlying
-		// deadlock is fixed. See #1185, #1193.
-		EventBufferSize: 1000,
 	}, s.stopper); err != nil {
 		return err
 	}
@@ -1444,57 +1440,59 @@ func (s *Store) processRaft() {
 	s.stopper.RunWorker(func() {
 		for {
 			select {
-			case e := <-s.multiraft.Events:
-				var cmd proto.RaftCommand
-				var groupID proto.RangeID
-				var commandID string
-				var index uint64
-				var callback func(error)
-
-				switch e := e.(type) {
-				case *multiraft.EventCommandCommitted:
-					groupID = e.GroupID
-					commandID = e.CommandID
-					index = e.Index
-					err := gogoproto.Unmarshal(e.Command, &cmd)
-					if err != nil {
-						log.Fatal(err)
-					}
-					if log.V(6) {
-						log.Infof("store %s: new committed command at index %d", s, e.Index)
+			case events := <-s.multiraft.Events:
+				for _, e := range events {
+					var cmd proto.RaftCommand
+					var groupID proto.RangeID
+					var commandID string
+					var index uint64
+					var callback func(error)
+
+					switch e := e.(type) {
+					case *multiraft.EventCommandCommitted:
+						groupID = e.GroupID
+						commandID = e.CommandID
+						index = e.Index
+						err := gogoproto.Unmarshal(e.Command, &cmd)
+						if err != nil {
+							log.Fatal(err)
+						}
+						if log.V(6) {
+							log.Infof("store %s: new committed command at index %d", s, e.Index)
+						}
+
+					case *multiraft.EventMembershipChangeCommitted:
+						groupID = e.GroupID
+						commandID = e.CommandID
+						index = e.Index
+						callback = e.Callback
+						err := gogoproto.Unmarshal(e.Payload, &cmd)
+						if err != nil {
+							log.Fatal(err)
+						}
+
+					default:
+						continue
 					}
 
-				case *multiraft.EventMembershipChangeCommitted:
-					groupID = e.GroupID
-					commandID = e.CommandID
-					index = e.Index
-					callback = e.Callback
-					err := gogoproto.Unmarshal(e.Payload, &cmd)
-					if err != nil {
-						log.Fatal(err)
+					if groupID != cmd.RangeID {
+						log.Fatalf("e.GroupID (%d) should == cmd.RangeID (%d)", groupID, cmd.RangeID)
 					}
 
-				default:
-					continue
-				}
-
-				if groupID != cmd.RangeID {
-					log.Fatalf("e.GroupID (%d) should == cmd.RangeID (%d)", groupID, cmd.RangeID)
-				}
-
-				s.mu.RLock()
-				r, ok := s.replicas[groupID]
-				s.mu.RUnlock()
-				var err error
-				if !ok {
-					err = util.Errorf("got committed raft command for %d but have no range with that ID: %+v",
-						groupID, cmd)
-					log.Error(err)
-				} else {
-					err = r.processRaftCommand(cmdIDKey(commandID), index, cmd)
-				}
-				if callback != nil {
-					callback(err)
+					s.mu.RLock()
+					r, ok := s.replicas[groupID]
+					s.mu.RUnlock()
+					var err error
+					if !ok {
+						err = util.Errorf("got committed raft command for %d but have no range with that ID: %+v",
+							groupID, cmd)
+						log.Error(err)
+					} else {
+						err = r.processRaftCommand(cmdIDKey(commandID), index, cmd)
+					}
+					if callback != nil {
+						callback(err)
+					}
 				}
 
 			case op := <-s.removeReplicaChan:
