commit fa1cb32dc4f81e23ab862dd5e7ac4f2920a33088
Author: mmukhi <mmukhi@google.com>
Date:   Mon Jul 31 17:31:24 2017 -0700

    Don't use 64-bit integers with atomic. (#1411)
    
    * Quick fix
    
    * Dont use 64-bit ints

diff --git a/transport/http2_client.go b/transport/http2_client.go
index e28172f..516ea06 100644
--- a/transport/http2_client.go
+++ b/transport/http2_client.go
@@ -99,7 +99,7 @@ type http2Client struct {
 	initialWindowSize int32
 
 	bdpEst          *bdpEstimator
-	outQuotaVersion uint64
+	outQuotaVersion uint32
 
 	mu            sync.Mutex     // guard the following variables
 	state         transportState // the state of underlying connection
@@ -682,10 +682,10 @@ func (t *http2Client) Write(s *Stream, data []byte, opts *Options) error {
 	r := bytes.NewBuffer(data)
 	var (
 		p   []byte
-		oqv uint64
+		oqv uint32
 	)
 	for {
-		oqv = atomic.LoadUint64(&t.outQuotaVersion)
+		oqv = atomic.LoadUint32(&t.outQuotaVersion)
 		if r.Len() > 0 || p != nil {
 			size := http2MaxFrameLen
 			// Wait until the stream has some quota to send the data.
@@ -751,7 +751,7 @@ func (t *http2Client) Write(s *Stream, data []byte, opts *Options) error {
 			return ContextErr(s.ctx.Err())
 		default:
 		}
-		if oqv != atomic.LoadUint64(&t.outQuotaVersion) {
+		if oqv != atomic.LoadUint32(&t.outQuotaVersion) {
 			// InitialWindowSize settings frame must have been received after we
 			// acquired send quota but before we got the writable channel.
 			// We must forsake this write.
@@ -1236,7 +1236,7 @@ func (t *http2Client) applySettings(ss []http2.Setting) {
 			}
 			t.streamSendQuota = s.Val
 			t.mu.Unlock()
-			atomic.AddUint64(&t.outQuotaVersion, 1)
+			atomic.AddUint32(&t.outQuotaVersion, 1)
 		}
 	}
 }
diff --git a/transport/http2_server.go b/transport/http2_server.go
index c54585e..0c946b1 100644
--- a/transport/http2_server.go
+++ b/transport/http2_server.go
@@ -100,7 +100,7 @@ type http2Server struct {
 	initialWindowSize int32
 
 	bdpEst          *bdpEstimator
-	outQuotaVersion uint64
+	outQuotaVersion uint32
 
 	mu            sync.Mutex // guard the following
 	state         transportState
@@ -831,13 +831,13 @@ func (t *http2Server) Write(s *Stream, data []byte, opts *Options) (err error) {
 	r := bytes.NewBuffer(data)
 	var (
 		p   []byte
-		oqv uint64
+		oqv uint32
 	)
 	for {
 		if r.Len() == 0 && p == nil {
 			return nil
 		}
-		oqv = atomic.LoadUint64(&t.outQuotaVersion)
+		oqv = atomic.LoadUint32(&t.outQuotaVersion)
 		size := http2MaxFrameLen
 		// Wait until the stream has some quota to send the data.
 		sq, err := wait(s.ctx, nil, nil, t.shutdownChan, s.sendQuotaPool.acquire())
@@ -894,7 +894,7 @@ func (t *http2Server) Write(s *Stream, data []byte, opts *Options) (err error) {
 			return ContextErr(s.ctx.Err())
 		default:
 		}
-		if oqv != atomic.LoadUint64(&t.outQuotaVersion) {
+		if oqv != atomic.LoadUint32(&t.outQuotaVersion) {
 			// InitialWindowSize settings frame must have been received after we
 			// acquired send quota but before we got the writable channel.
 			// We must forsake this write.
@@ -935,7 +935,7 @@ func (t *http2Server) applySettings(ss []http2.Setting) {
 				stream.sendQuotaPool.add(int(s.Val) - int(t.streamSendQuota))
 			}
 			t.streamSendQuota = s.Val
-			atomic.AddUint64(&t.outQuotaVersion, 1)
+			atomic.AddUint32(&t.outQuotaVersion, 1)
 		}
 
 	}
